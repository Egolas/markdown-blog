// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package views generated by go-bindata.// sources:
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/index.html
// web/views/layouts/footer.html
// web/views/layouts/header.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1651999235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1651999235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\x73\x2c\x2a\xc9\x4c\xce\x49\xad\xad\x05\x04\x00\x00\xff\xff\x95\x68\x81\xe7\x0c\x00\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 12, mode: os.FileMode(420), modTime: time.Unix(1668859381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func layoutsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsFooterHtml,
		"layouts/footer.html",
	)
}

func layoutsFooterHtml() (*asset, error) {
	bytes, err := layoutsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/footer.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1667724476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x41\x6a\xc4\x30\x0c\x05\xd0\x7d\x4f\x21\xb4\x17\xd9\xb7\x8e\xef\xa2\x49\x64\x47\xa9\x62\x0d\xb6\x63\x98\xdb\x97\x52\x3a\x84\x42\x61\x96\x12\xff\xff\x17\x56\x1d\xb0\x18\xb7\x36\xe3\xcd\xfd\x93\x36\xe1\x55\x2a\x82\xae\x7f\x1e\xd5\x4d\x66\x2c\x3c\x34\x73\x57\x2f\x18\xdf\x00\x00\x02\x3f\xeb\xbd\xc0\xfd\x34\x23\x93\xd4\x61\x6f\xd4\xdd\xed\xc6\x95\x78\xf9\xce\x43\xf7\x9c\x4d\xa8\x9d\xc7\xc1\xf5\x81\xb0\x55\x49\x33\xee\x3c\xb8\x2d\x55\xef\xfd\xfd\x03\x63\xd0\xdf\xb5\xc4\x90\x98\xd8\x34\x17\xda\xcf\xd6\x35\x3d\x30\x86\x49\x63\x98\xf8\x5f\xb9\x6a\xde\x7e\xe8\x4d\x0e\x79\xc2\x97\xe3\x35\xb6\x9d\x85\xfc\xc2\x85\x69\xd5\x11\xbf\x02\x00\x00\xff\xff\x39\xdf\x3f\x2c\x2c\x01\x00\x00")

func layoutsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsHeaderHtml,
		"layouts/header.html",
	)
}

func layoutsHeaderHtml() (*asset, error) {
	bytes, err := layoutsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/header.html", size: 300, mode: os.FileMode(420), modTime: time.Unix(1667728423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4b\x8f\xdb\x36\x10\x3e\x7b\x81\xfd\x0f\x13\xf6\xb0\x5e\x60\x29\x65\x73\x2a\xba\x92\x83\xbc\x5a\x04\x08\xd2\xd7\x06\x68\x11\x04\xc5\x58\x1c\x4b\xf4\x52\xa4\x4a\xd2\x56\x14\xc5\xff\xbd\xa0\x1e\x96\x9c\x4d\x8a\x04\x39\x89\xe4\xcc\x7c\x33\xfc\xe6\x41\x25\x0f\x9e\xff\xfa\xec\xf6\xef\xdf\x5e\x40\xe1\x4b\xb5\x3a\x3f\x4b\xc2\x17\x14\xea\x3c\x65\xa4\x59\x77\x42\x28\x56\xe7\x67\x8b\xa4\x24\x8f\x90\x15\x68\x1d\xf9\x94\xbd\xb9\xfd\x99\xff\xc8\x26\x41\xe1\x7d\xc5\xe9\xdf\x9d\xdc\xa7\xec\x2f\xfe\xe6\x09\x7f\x66\xca\x0a\xbd\x5c\x2b\x62\x90\x19\xed\x49\xfb\x94\xbd\x7c\x91\x92\xc8\x69\x66\xa7\xb1\xa4\x94\xed\x25\xd5\x95\xb1\x7e\xa6\x5a\x4b\xe1\x8b\x54\xd0\x5e\x66\xc4\xbb\xcd\x15\x48\x2d\xbd\x44\xc5\x5d\x86\x8a\xd2\xeb\xe8\x61\x0f\xe4\xa5\x57\xb4\x6a\x5b\x88\x6e\xc3\x0a\x0e\x87\x24\xee\xcf\xce\xcf\x82\x5c\x49\x7d\x07\x96\x54\xca\x9c\x6f\x14\xb9\x82\xc8\x33\x90\x22\x65\xbe\xa0\x92\x78\xe6\x1c\x83\xc2\xd2\x26\x65\xb1\xf3\xe8\x65\x16\x67\xce\xc5\xb9\xf4\xc5\x6e\xcd\x4b\xb4\x77\xc2\xd4\x3a\xa8\xc5\x02\xed\x5d\x14\xf4\x57\x5f\x06\xbe\x8f\x54\xa2\xd4\xdf\x6e\x95\x4b\xbf\x36\xe6\x8e\x77\x41\xc6\x9d\xee\xf7\x82\xd4\xb4\x76\xd2\x7f\x37\x4c\x56\x60\xe5\xc9\xf2\x8d\x51\xe2\xbb\xef\x55\x29\xe9\x3d\xd9\x6f\xc7\x29\x64\x5e\x28\x99\x17\x7e\x40\xc2\xeb\xeb\x86\xcf\x13\x74\x7e\xb6\x68\x5b\xb9\x81\xe8\x89\x46\xd5\x7c\x20\x1b\x3d\x45\x29\x76\x87\x43\xf0\xf2\x80\x73\xe8\xb6\x80\x41\xea\x65\xe6\x80\xf3\x2e\x00\x97\x59\x59\xf9\xb0\x5c\xec\xd1\xc2\x3f\x45\xe9\x21\xed\x3f\x1f\x3f\xc2\xdb\x77\x37\x41\xb2\xdc\xec\x74\xe6\xa5\xd1\xcb\x4b\x68\xc3\x01\x40\x50\x2e\x4a\x48\x41\x98\x6c\x57\x92\xf6\x51\x66\x09\x3d\xbd\x50\x14\x76\x4b\xd6\x03\xb3\xcb\x9b\x5e\xbf\x28\x23\x67\x33\x48\x81\x85\xee\x71\x3f\xc5\x71\x51\x46\xeb\x10\x53\x94\x99\x32\x6c\xb6\xee\x71\xdb\xde\x0b\x9f\xdd\x4c\xfe\xdc\xdc\x5d\x4e\x7e\xf0\xe5\x9e\x36\xb7\x98\xbf\xc6\x92\x26\xaf\x6f\x1f\xbe\x1b\x0c\x5d\x54\xa1\x25\xed\x5f\x1b\x41\x91\xd4\x8e\xac\x7f\x4a\x1b\x63\x69\x59\x94\x57\xe0\xfa\xf8\x0e\x97\xcb\x6e\x91\xc4\x13\x1f\x6d\x4b\x5a\x04\xfe\xee\x53\xfb\x8b\x31\xb9\xa2\x89\xdb\x7e\x0f\x1e\x73\x58\xe6\x1e\xf3\x68\xeb\x2e\x4f\x09\x06\x74\x8d\xce\xc0\xd9\x2c\x3d\x12\x50\xd7\x75\x94\x77\x96\x1e\xf3\x12\x35\xe6\xa1\x32\x4c\x19\x07\x88\x78\xeb\x1e\x4b\x91\xce\x19\x19\xbd\xb2\xd5\x3c\xcc\x79\x06\x6b\xa9\x85\xa9\x23\x81\x1e\x5f\x61\x43\x16\x52\xb8\x77\x34\x65\x75\x4c\x2a\x04\x7f\xcb\xcb\xf6\xa8\x13\x55\x3b\x57\x2c\xd1\xe6\x1d\xd3\xee\xf2\x26\x5c\x74\xd1\x69\x5d\x6c\xdd\xc5\x15\x68\xaa\xe1\x39\x7a\x5a\x5e\x06\xd6\x26\x61\x66\xf4\x46\xe6\x17\x57\x70\xf1\xb9\xb8\x2f\xfe\x8f\xe2\x24\x1e\x86\x6f\xb2\x36\xa2\xe9\x2e\x26\xe4\x1e\x32\x85\xce\xa5\x2c\xf4\x10\x6c\x8c\xf6\xdc\xc9\x0f\xc4\x1f\xf5\xeb\x0d\x96\x52\x35\xfc\x21\x64\x46\x19\xdb\x77\x06\x7f\xd4\x35\xd6\x3d\x6b\xee\x76\x65\x89\xb6\xe9\xa5\x8b\x24\x23\xed\xc9\xf6\x9b\x45\x52\x8d\xaa\xca\xe4\x86\x81\x35\x8a\x86\xf5\x2a\xc1\xa1\x1d\xd9\x27\x53\x17\x57\x49\x5c\x0d\x68\xf1\x1c\x2e\xd1\xb8\x1f\x20\x34\xee\x65\x8e\x81\x64\x36\xba\xda\xa9\xd1\xd7\x69\x44\x8b\x45\xdb\x5a\xd4\x39\x41\xf4\x1a\xf7\x5d\x6d\xf5\x87\xe0\xa9\xac\x14\x7a\x82\x00\xe7\xa2\xf0\x6c\x31\x88\x66\x1a\x03\x89\xdd\x2e\x51\x72\xc4\x17\x72\x2f\x05\xd9\x50\x2e\x4a\x8e\xee\xe3\x9d\x1a\x63\xd6\xb8\xef\xa9\x8a\x85\xdc\x7f\x9e\xb4\x90\x8b\x91\xb1\x13\x99\x68\xb8\xd4\x3a\x80\xf7\xb8\x6d\x0b\x96\xb4\x20\x0b\x4c\x61\x63\x76\xde\x75\xf9\x24\x3b\x84\x3b\xc6\x37\x47\xa9\x30\x27\x5e\x5b\xac\x2a\xb2\x0c\x3c\xae\xa5\x16\xf4\x3e\x65\xfc\x7a\xcc\x40\x78\x4b\x8e\xf4\xdc\x33\x3d\x09\x60\xb1\x48\xd0\x7a\x99\x29\x1a\x75\x8e\x6f\xd9\xec\x12\x9d\x5e\xe8\xd8\x3f\xfa\x60\x7d\x41\x90\xed\x6c\x98\x0f\x13\xcd\x05\x59\x1a\xba\x77\x31\xe6\xa0\x91\xa4\xc4\xf1\x16\x81\xb3\xc1\xdb\xcc\xfd\x50\x27\x3f\x74\xcc\xf5\xb7\x67\x63\x30\x53\x21\xf0\xdc\x70\x6f\x2a\xb6\x4a\x8e\x89\xda\x20\x6c\x90\xa3\xb5\xa6\xe6\xbb\x20\x89\xe5\x2a\xd4\xd7\x78\xf1\x63\x7e\x4e\xd6\xb3\xb4\x4d\xab\x8d\x31\xa1\x0e\x3f\x93\x8e\x5e\x72\x4c\x47\x32\x1c\x74\x9d\x36\xd8\x27\xf1\xd0\x7b\xe3\xd0\xea\xc6\xd5\xf8\x0c\x6d\x67\xaf\x50\xb4\x75\x27\x53\xe8\x4b\x06\xdb\xdf\x77\x64\x9b\xaf\xd5\x3e\x79\x6a\xbf\xd2\xe6\xf8\xa4\x7e\xa5\x7e\xf7\x7b\xf2\xa9\x6e\x3c\xfc\x12\xb6\x2d\x08\xda\x48\x7d\xda\x6a\x21\xeb\xb3\xb6\x1a\xa2\x84\x30\xe2\x32\x2f\xf7\xdd\x44\x0e\x2c\x8e\x05\xd0\xb6\xd1\x2b\xa9\xef\x86\xe3\x45\xdb\x46\x7f\x16\xa6\x0e\xef\x53\x5f\x3f\xfd\x63\xf2\xd2\x3d\x97\xf6\x70\x98\xaa\x80\xde\x67\xdc\x5b\x99\xe7\x64\x61\x83\x7d\x15\x4c\xbd\x3d\xd4\x43\x6f\xfb\xac\x90\x4a\x58\xd2\xbd\x64\x9a\x28\x43\x4d\xba\xd1\xf1\x30\x4f\x4e\xd4\xbf\x3c\x51\x60\x94\x4f\x3e\xfb\x61\x71\x3c\x19\x06\xc9\xb0\xff\x2f\x00\x00\xff\xff\x83\x9a\x11\x90\x52\x0b\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 2898, mode: os.FileMode(493), modTime: time.Unix(1668859727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"index.html":          indexHtml,
	"layouts/footer.html": layoutsFooterHtml,
	"layouts/header.html": layoutsHeaderHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{layoutsFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{layoutsHeaderHtml, map[string]*bintree{}},
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
