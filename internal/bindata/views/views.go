// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package views generated by go-bindata.// sources:
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/index.html
// web/views/layouts/footer.html
// web/views/layouts/header.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1651999235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1651999235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\x2c\x2a\xc9\x4c\xce\x49\x55\x48\xce\x49\x2c\x2e\xb6\x55\xca\x4d\x2c\xca\x4e\xc9\x2f\xcf\xd3\x4d\xca\x4f\xa9\x54\xb2\xe3\x52\x50\x50\x50\xa8\xae\xd6\x73\x84\xa8\xaa\xad\xe5\xb2\xd1\x87\xea\xb0\x03\x04\x00\x00\xff\xff\x82\x8b\x94\x11\x3b\x00\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 59, mode: os.FileMode(420), modTime: time.Unix(1668859849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func layoutsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsFooterHtml,
		"layouts/footer.html",
	)
}

func layoutsFooterHtml() (*asset, error) {
	bytes, err := layoutsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/footer.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1667724476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x41\x6a\xc4\x30\x0c\x05\xd0\x7d\x4f\x21\xb4\x17\xd9\xb7\x8e\xef\xa2\x49\x64\x47\xa9\x62\x0d\xb6\x63\x98\xdb\x97\x52\x3a\x84\x42\x61\x96\x12\xff\xff\x17\x56\x1d\xb0\x18\xb7\x36\xe3\xcd\xfd\x93\x36\xe1\x55\x2a\x82\xae\x7f\x1e\xd5\x4d\x66\x2c\x3c\x34\x73\x57\x2f\x18\xdf\x00\x00\x02\x3f\xeb\xbd\xc0\xfd\x34\x23\x93\xd4\x61\x6f\xd4\xdd\xed\xc6\x95\x78\xf9\xce\x43\xf7\x9c\x4d\xa8\x9d\xc7\xc1\xf5\x81\xb0\x55\x49\x33\xee\x3c\xb8\x2d\x55\xef\xfd\xfd\x03\x63\xd0\xdf\xb5\xc4\x90\x98\xd8\x34\x17\xda\xcf\xd6\x35\x3d\x30\x86\x49\x63\x98\xf8\x5f\xb9\x6a\xde\x7e\xe8\x4d\x0e\x79\xc2\x97\xe3\x35\xb6\x9d\x85\xfc\xc2\x85\x69\xd5\x11\xbf\x02\x00\x00\xff\xff\x39\xdf\x3f\x2c\x2c\x01\x00\x00")

func layoutsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsHeaderHtml,
		"layouts/header.html",
	)
}

func layoutsHeaderHtml() (*asset, error) {
	bytes, err := layoutsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/header.html", size: 300, mode: os.FileMode(420), modTime: time.Unix(1667728423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x51\x6f\xdb\xba\x0e\x7e\x4e\x81\xfe\x07\xce\xf7\xa1\x09\x50\xdb\xeb\x9e\x2e\x56\x3b\xc3\xd6\xee\x0e\x05\x86\xed\xde\xad\x03\xee\xc1\x50\x1c\x30\x16\x63\xab\x95\x25\x1f\x49\x49\x96\x79\xf9\xef\x07\x92\xec\xd8\x59\xdb\x61\x3b\x7b\xb2\x24\x92\x1f\xa9\x8f\x22\xe9\xec\xc9\xe5\xfb\x8b\xeb\x3f\xfe\xfb\x1a\x2a\x5b\x8b\xf9\xf1\x51\xe6\xbe\x20\x50\x96\x79\x44\x32\xf2\x27\x84\x6c\x7e\x7c\x34\xc9\x6a\xb2\x08\x45\x85\xda\x90\xcd\xa3\x4f\xd7\xff\x89\xff\x1d\x0d\x82\xca\xda\x26\xa6\xbf\x56\x7c\x9d\x47\xff\x8f\x3f\xbd\x8c\x2f\x54\xdd\xa0\xe5\x0b\x41\x11\x14\x4a\x5a\x92\x36\x8f\xae\x5e\xe7\xc4\x4a\x1a\xd9\x49\xac\x29\x8f\xd6\x9c\x36\x8d\xd2\x76\xa4\xba\xe1\xcc\x56\x39\xa3\x35\x2f\x28\xf6\x9b\x53\xe0\x92\x5b\x8e\x22\x36\x05\x0a\xca\xcf\x92\xa7\x01\xc8\x72\x2b\x68\xde\xb6\x90\x5c\xbb\x15\xec\x76\x59\x1a\xce\x8e\x8f\x9c\x5c\x70\x79\x07\x9a\x44\x1e\x19\xbb\x15\x64\x2a\x22\x1b\x01\x67\x79\x64\x2b\xaa\x29\x2e\x8c\x89\xa0\xd2\xb4\xcc\xa3\xd4\x58\xb4\xbc\x48\x0b\x63\xd2\x92\xdb\x6a\xb5\x88\x6b\xd4\x77\x4c\x6d\xa4\x53\x4b\x19\xea\xbb\xc4\xe9\xcf\x1f\x07\x7e\x10\x69\xa1\xd4\x5d\xec\xdd\xa5\x5e\xf7\x77\x41\x36\xb4\x30\xdc\xfe\x36\x4c\x51\x61\x63\x49\xc7\x4b\x25\xd8\x6f\xdf\xab\x11\xdc\x5a\xd2\xbf\x8e\x53\xf1\xb2\x12\xbc\xac\x6c\x87\x84\x67\x67\xdb\xf8\x9f\x51\x5d\x23\x97\x7b\xab\xb6\x05\xbe\x84\xe4\x0d\xb7\x28\xee\x92\x0b\xc1\x49\xda\xab\x4b\xd8\xed\x7e\xf1\x92\x28\xee\xba\xcf\x08\x9a\x24\x73\x40\x7e\xed\xbc\xbc\x94\x28\xb6\x5f\x49\x27\xaf\x90\xb3\x55\xf0\xf1\x24\x8e\xc1\x6f\x01\x9d\xd4\xf2\xc2\x40\x1c\xfb\x0b\x99\x42\xf3\xc6\xba\xe5\x64\x8d\x1a\xfe\xac\x6a\x0b\x79\xf8\x7c\xfb\x06\x9f\x6f\xce\x9d\x64\xba\x5c\xc9\xc2\x72\x25\xa7\x33\x68\xdd\x01\x80\x53\xae\x6a\xc8\x81\xa9\x62\x55\x93\xb4\x49\xa1\x09\x2d\xbd\x16\xe4\x76\xd3\x28\x00\x47\xb3\xf3\xa0\x5f\xd5\x89\xd1\x05\xe4\x10\xb9\x12\x35\xcf\xd3\xb4\xaa\x93\x85\x8b\x29\x29\x54\xed\x36\xb7\xe6\x45\xdb\xde\x0b\x3f\x3a\x1f\xfc\x99\xb1\xbb\x92\x6c\xe7\xcb\xbc\xda\x5e\x63\xf9\x0e\x6b\x1a\xbc\x7e\x7e\x7a\xd3\x19\x9a\xa4\x41\x4d\xd2\xbe\x53\x8c\x12\x2e\x0d\x69\xfb\x8a\x96\x4a\xd3\xb4\xaa\x4f\xc1\x84\xf8\x76\xb3\xa9\x5f\x64\xe9\xc0\xc7\x0f\xa8\x7d\xa3\x54\x29\x68\xe0\x36\xec\xc1\x62\x09\xd3\xd2\x62\x99\xdc\x9a\xd9\x21\xc1\x80\x66\x2b\x0b\x30\xba\xc8\xf7\x04\x6c\x36\x9b\xa4\xf4\x96\x16\xcb\x1a\x25\x96\xee\xd1\xaa\x3a\x75\x10\xe9\xad\x79\xc1\x59\x3e\x66\xa4\xf7\x1a\xcd\xc7\x61\x8e\x33\xb8\xe1\x92\xa9\x4d\xc2\xd0\xe2\x5b\xdc\x92\x86\x1c\xee\x1d\x0d\x59\xed\x93\x0a\xce\xdf\x74\xd6\xee\x75\x92\x66\x65\xaa\x29\xea\xd2\x33\x6d\x66\xe7\xee\xa2\x13\xaf\x75\x72\x6b\x4e\x4e\x41\xd2\x06\x2e\xd1\xd2\x74\xe6\x58\x1b\x84\x85\x92\x4b\x5e\x9e\x9c\xc2\xc9\x43\x71\x9f\xfc\x88\xe2\x2c\xed\x3a\x7c\xb6\x50\x6c\xeb\x2f\xc6\xf8\x1a\x0a\x81\xc6\xe4\x91\x2b\x6f\x58\x2a\x69\x63\xc3\xbf\x52\xfc\x2c\xac\x97\x58\x73\xb1\x8d\xcf\xa0\x50\x42\xe9\x50\xb4\xf1\x33\x5f\x17\xf7\xac\x63\xb3\xaa\x6b\xd4\xdb\x20\x9d\x64\x05\x49\x4b\x3a\x6c\x26\x59\xd3\xab\x0a\x55\xaa\x08\xb4\x12\xd4\xad\xe7\x19\x76\xc5\x18\x7d\xd7\xda\x71\x9e\xa5\x4d\x87\x96\x8e\xe1\x32\x89\xeb\x0e\x42\xe2\x9a\x97\xe8\x48\x8e\x7a\x57\x2b\xd1\xfb\x3a\x8c\x68\x32\x69\x5b\x8d\xb2\x24\x48\xde\xe1\xda\xbf\xad\x70\x08\x96\xea\x46\xa0\x25\x70\x70\x26\x71\xb3\x31\x82\x64\xa4\xd1\x91\xe8\x77\x99\xe0\x3d\x3e\xe3\x6b\xce\x48\xbb\xe7\x22\x78\xef\x3e\x5d\x89\x3e\x66\x89\xeb\x40\x55\xca\xf8\xfa\x61\xd2\x5c\x2e\x7a\xc6\x0e\x64\x6c\x1b\x73\x29\x1d\x78\xc0\x6d\x5b\xd0\x24\x19\x69\x88\x04\x6e\xd5\xca\x1a\x9f\x4f\xd2\x5d\xb8\x7d\x7c\x63\x94\x06\x4b\x8a\x37\x1a\x9b\x86\x74\x04\x16\x17\x5c\x32\xfa\x92\x47\xf1\x59\x9f\x01\xd7\x45\xf7\xf4\xdc\x33\x3d\x08\x60\x12\x2a\xf1\x43\x08\xc2\x56\x04\xc5\x4a\xbb\xba\x1f\xe8\xab\x48\x53\x57\x95\x3d\xb5\x5b\x4e\x82\xed\x83\xeb\x7c\xb8\x89\x1c\xda\xac\xa3\xae\xe7\xc6\x8b\xfb\xb7\xf0\x2f\xcf\x4e\xb8\x61\xd4\x07\x35\x24\x3b\x2e\x55\x6c\x55\x13\xcd\xb3\x7d\x32\x96\x08\x4b\x8c\x51\x6b\xb5\x89\x57\x4e\x92\xf2\xb9\x7b\x43\xfd\xe5\x46\x7e\x46\xeb\x51\x6a\x86\xd5\x52\x29\xf7\xd6\x1e\xa0\x3c\x48\xf6\x94\x67\xdd\x81\xaf\xa6\xce\x3e\x4b\xbb\xfa\xea\x1b\x93\x6f\x49\xfd\xa0\xb9\x1d\x0d\xc1\xe4\xd6\x1c\x74\x9a\xc7\x0c\x6e\xff\xb7\x22\xbd\xfd\x59\xed\x83\x49\xff\x93\x36\xfb\x89\xfe\x93\xfa\x7e\xf8\x7e\xa7\xfb\x83\x19\xfc\x18\x4c\x37\x6a\xeb\xfb\x60\xa3\x9e\x5b\x28\x69\x2c\x04\x55\xc8\x7d\x67\x0c\x3e\xa6\x7e\x50\x16\x9d\xa3\xe7\xbe\x25\x7e\xe7\x7d\xb7\x3b\x39\x1d\x94\x3e\x52\xa1\xc9\x3e\xa0\x18\x04\xbd\xb2\xa6\x46\x1d\x28\x7d\xa0\x46\xf5\x42\xb5\x91\xa4\x0f\xa4\xef\xdd\x49\x2f\x46\x56\x73\xf9\x1c\x3e\x3f\x20\xbf\xf1\x0a\x9c\x1d\x18\x5f\xb1\xde\x52\xe0\x82\x84\x71\xa6\xe1\xaa\x27\x37\xc7\x47\x93\xdd\xcc\x37\xff\x8e\xa7\xf0\x18\xa7\xbd\xc2\xcc\xbd\xb5\x11\xfd\xe3\x4e\x1f\xfe\xf2\x7d\x52\x18\x2d\xb9\x3c\x6c\x6d\x3e\x27\x43\x1b\xeb\x5e\x0c\xb8\x91\x52\x58\xbe\xf6\x13\xd0\xbd\xe8\xbe\x18\xdb\x36\x79\xcb\xe5\x5d\x77\x3c\x69\xdb\xe4\x63\xa5\x36\xee\x7f\x20\x14\x76\x18\xde\x57\xe6\x92\xeb\xdd\x6e\xa8\x48\xfa\x52\xc4\x56\xf3\xb2\x24\x0d\x4b\x0c\x15\x39\xf4\xd2\xae\x36\x83\xed\x45\xc5\x05\xd3\x24\x83\x64\xe8\xe0\xa8\x2d\x2f\x04\x99\xde\x71\xd7\xbf\x0f\xd4\x1f\xef\xe0\xd0\xcb\x07\x9f\xa1\x39\xef\x4f\xba\xc6\xdd\xed\xff\x0e\x00\x00\xff\xff\x38\x88\xb4\x17\x27\x0d\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 3367, mode: os.FileMode(493), modTime: time.Unix(1669530277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"index.html":          indexHtml,
	"layouts/footer.html": layoutsFooterHtml,
	"layouts/header.html": layoutsHeaderHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{layoutsFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{layoutsHeaderHtml, map[string]*bintree{}},
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
